/* *************************************************************************** */  
const errModule 			= require('../../../Utils/error');
const xmlParsing            = require('../../../Utils/xmlParsing')
const utils                 = require('./utils')
/* *************************************************************************** */  

/* *************************************************************************** */  
module.exports.frameMessage =  function frameMessage (transXpedia) {
	return new Promise ((resolved, rejected) => {
		try {
			let request = {
                otp : {
                    opts : {
                        ch : transXpedia.clientData.channel
                    },
                    tid : transXpedia.clientData.tid,
                    uid :  transXpedia.clientData.uid

                },
                otpData : {
                    channel : transXpedia.clientData.channel,
                    consent : transXpedia.clientData.consent,
                    terminalId : transXpedia.clientData.tid,
                    uid : transXpedia.clientData.uid
                },
                transactionInfo:{
                    caId: utils.frameField42(
                        transXpedia.clientData.caTid,
                        transXpedia.clientData.bankCode
                      ),
                      caTa: utils.frameField43(
                        transXpedia.clientData.agentName,
                        transXpedia.clientData.agentAddress,
                        
                        transXpedia.clientData.agentCity,
                        transXpedia.clientData.agentState
                      ),
                    caTid : transXpedia.clientData.caTid,
                    mcc:transXpedia.clientData.mcc,
                    posCode:transXpedia.clientData.posCode,
                    posEntryMode: transXpedia.clientData.posEntryMode
                }
            }
            
           
			transXpedia.requestData = request;
			transXpedia.requestBuffer = JSON.stringify(request); 
            this.emit("togateway", transXpedia.requestBuffer || '');
			return resolved(transXpedia);
		} catch (e) {
			transXpedia.errorData.systemErr   	= e;
			transXpedia.errorData.serverError 	= errModule.E_GATEWAY_MESSAGE_FRAMING;
			return rejected(transXpedia);
		}
	});
};

module.exports.extractMessage = function extractMessage (transXpedia) {
	return new Promise ((resolved, rejected) => {
		try {
			this.emit('fromgateway', transXpedia.responseBuffer);

            transXpedia.responseBuffer = JSON.parse(transXpedia.responseBuffer);

			transXpedia.responseData.gatewayResponseCode	= transXpedia.responseBuffer.respCode || '2000';
			transXpedia.responseData.gatewayResponseMsg 	= transXpedia.responseBuffer.respDesc || 'Invalid Response From CBS/Gateway';

            if(transXpedia.responseData.gatewayResponseCode == '00') {
                transXpedia.responseData.communicationId		= transXpedia.responseBuffer.communicationId;
                transXpedia.responseData.uidType 		        = transXpedia.responseBuffer.uidType;
                transXpedia.responseData.uidaiAuthCode 		    = transXpedia.responseBuffer.uidaiAuthCode;
                transXpedia.responseData.txn 			        = transXpedia.responseBuffer.txn;
            }
                  
            return resolved(transXpedia);

		} catch (e) {
			transXpedia.errorData.systemErr   	= e;
			transXpedia.errorData.serverError 	= errModule.E_GATEWAY_MESSAGE_DE_FRAMING;
			return rejected(transXpedia);
		}
	});
};

/* *************************************************************************** */  
