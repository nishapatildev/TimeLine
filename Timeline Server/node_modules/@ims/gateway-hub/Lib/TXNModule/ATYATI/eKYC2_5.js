/* *************************************************************************** */
const errModule = require("../../../Utils/error");
const xmlParsing = require("../../../Utils/xmlParsing");
const utils = require("./utils");
/* *************************************************************************** */

/* *************************************************************************** */
module.exports.frameMessage = function frameMessage(transXpedia) {
  return new Promise((resolved, rejected) => {
    try {
      let date = new Date()
     
      let request = {
        kycReqInfo: {
          auth: {
            data: {
              encodedValue: transXpedia.clientData.rdInfo.data.encodedValue,
              type: transXpedia.clientData.rdInfo.data.type,
            },
            encodedHmac: transXpedia.clientData.rdInfo.encodedHmac,
            meta: {
              dc: transXpedia.clientData.rdInfo.meta.dc,
              dpId: transXpedia.clientData.rdInfo.meta.dpId,
              mc: transXpedia.clientData.rdInfo.meta.mc,
              mi: transXpedia.clientData.rdInfo.meta.mi,
              rdsId: transXpedia.clientData.rdInfo.meta.rdsId,
              rdsVer: transXpedia.clientData.rdInfo.meta.rdsVer,
              // udc: utils.frameField42(
              //   transXpedia.clientData.transactionInfo.cbsTerminalId,
              //   transXpedia.clientData.transactionInfo.bankCode
              // ),
            },
          //  pidTs : date,
            rc: transXpedia.clientData.rdInfo.rc,
            skey: {
              ci: transXpedia.clientData.rdInfo.skey.ci,
              encodedSk: transXpedia.clientData.rdInfo.skey.encodedSk,
            },
	    txn : transXpedia.clientData.rdInfo.txn,
	    
	    //communicationId : transXpedia.clientData.rdInfo.communicationId,
              communicationId : null,
	          uid: transXpedia.clientData.rdInfo.uid,
            //userName : "",
            uses: {
              bio: transXpedia.clientData.rdInfo.uses.bio,
	            otp: transXpedia.clientData.rdInfo.uses.otp,
              bt: transXpedia.clientData.rdInfo.uses.bt,
		          pin: transXpedia.clientData.rdInfo.pin,
	            pi: transXpedia.clientData.rdInfo.pi,
	            pa: transXpedia.clientData.rdInfo.pa,
	            pfa: transXpedia.clientData.rdInfo.pfa,
            },
          },
          pfr: transXpedia.clientData.transactionInfo.pfr,
        },
        transactionInfo: {
          caId: utils.frameField42(
            transXpedia.clientData.transactionInfo.cbsID,
            transXpedia.clientData.transactionInfo.bankCode
          ),
          caTa: utils.frameField43(
            transXpedia.clientData.transactionInfo.agentName,
            transXpedia.clientData.transactionInfo.agentAddress,
            transXpedia.clientData.transactionInfo.agentCity,
           
            transXpedia.clientData.transactionInfo.agentState
          ),
          caTid: transXpedia.clientData.transactionInfo.cbsTerminalId,
          mcc: transXpedia.clientData.transactionInfo.mcc,
          posCode: transXpedia.clientData.transactionInfo.posCode,
          posEntryMode: transXpedia.clientData.transactionInfo.posEntryMode,
        },
      };
      transXpedia.requestData = request;
      transXpedia.requestBuffer = JSON.stringify(request);
      this.emit("togateway", transXpedia.requestBuffer || "");
      return resolved(transXpedia);
    } catch (e) {
      transXpedia.errorData.systemErr = e;
      transXpedia.errorData.serverError = errModule.E_GATEWAY_MESSAGE_FRAMING;
      return rejected(transXpedia);
    }
  });
};

module.exports.extractMessage = function extractMessage(transXpedia) {
  return new Promise((resolved, rejected) => {
    try {
      this.emit("fromgateway", transXpedia.responseBuffer);

      transXpedia.responseBuffer = JSON.parse(transXpedia.responseBuffer);

      transXpedia.responseData.gatewayResponseCode =
        transXpedia.responseBuffer.respCode || "2000";
      transXpedia.responseData.gatewayResponseMsg =
        transXpedia.responseBuffer.respDesc ||
        "Invalid Response From CBS/Gateway";

      if (transXpedia.responseData.gatewayResponseCode == "00") {
        transXpedia.responseData.ekycData = transXpedia.responseBuffer.uidData;
        transXpedia.responseData.communicationId =
          transXpedia.responseBuffer.communicationId || "";
        transXpedia.responseData.uidType =
          transXpedia.responseBuffer.uidType || "";
        transXpedia.responseData.uidToken =
          transXpedia.responseBuffer.uidToken || "";
        transXpedia.responseData.uidaiAuthCode =
          transXpedia.responseBuffer.uidaiAuthCode || "";
        transXpedia.responseData.txn = transXpedia.responseBuffer.txn || "";
        transXpedia.responseData.gatewayRrn =
          transXpedia.requestBuffer.rrn || "";
      }

      return resolved(transXpedia);
    } catch (e) {
      console.log("error node module",e)
      transXpedia.errorData.systemErr = e;
      transXpedia.errorData.serverError =
        errModule.E_GATEWAY_MESSAGE_DE_FRAMING;
      return rejected(transXpedia);
    }
  });
};

/* *************************************************************************** */
