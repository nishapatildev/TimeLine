/* *************************************************************************** */  
const errModule 			= require('../../../Utils/error');
const xmlParsing            = require('../../../Utils/xmlParsing')
/* *************************************************************************** */  

/* *************************************************************************** */  
module.exports.frameMessage =  function frameMessage (transXpedia) {
	return new Promise ((resolved, rejected) => {
		try {
			let request = {
                    MapMyIndiaReqDTO : {
						"requestString": `Lat=${transXpedia.clientData.latitude}&lng=${transXpedia.clientData.longitude}`,
						"operationName": "REVGEOCODE",
						"headers": {
							"lickey": transXpedia.clientData.accessToken
						}
                    },
					sessionContext: {
                        "channelId"             : transXpedia.clientData.channelId,
                        "userId"                : transXpedia.clientData.userId,
                        "externalReferenceNo"   : transXpedia.clientData.transactionId,
                        "bankCode"              : transXpedia.clientData.bankCode,
                        "transactionBranch"     : transXpedia.clientData.transactionBranch
                    }
			}
			transXpedia.requestData = request;
			transXpedia.requestBuffer = JSON.stringify(request); 
			this.emit("togateway", transXpedia.requestBuffer || '');
			return resolved(transXpedia);
		} catch (e) {
			transXpedia.errorData.systemErr   	= e;
			transXpedia.errorData.serverError 	= errModule.E_GATEWAY_MESSAGE_FRAMING;
			return rejected(transXpedia);
		}
	});
};

module.exports.extractMessage = function extractMessage (transXpedia) {
	return new Promise ((resolved, rejected) => {
		try {
			this.emit('fromgateway', transXpedia.responseBuffer);
            xmlParsing.parseXMLBufferToJSON(transXpedia)
            .then((transXpedia)=>{
					transXpedia.responseData.gatewayResponse = transXpedia.xmlJson;
					if(transXpedia.xmlJson.Response.status.replyCode == 0){
						transXpedia.responseData.gatewayResponseCode = '00';
						transXpedia.responseData.gatewayResponseMsg = 'success';
						transXpedia.responseData.gatewayRefId = transXpedia.xmlJson.Response.status.internalReferenceNumber;
						let responseString = JSON.parse(transXpedia.xmlJson.Response.responseString);
						transXpedia.responseData.address = JSON.stringify(responseString.results[0]);
					}
					else{
						transXpedia.responseData.gatewayResponseCode = transXpedia.xmlJson.Response.status.errorCode;
						transXpedia.responseData.gatewayResponseMsg = transXpedia.xmlJson.Response.status.replyText;
						transXpedia.responseData.gatewayRefId = transXpedia.xmlJson.Response.status.internalReferenceNumber;
					}
					return resolved(transXpedia);
            }).catch((transXpedia)=>{
                return rejected(transXpedia);
            })
		} catch (e) {
			transXpedia.errorData.systemErr   	= e;
			transXpedia.errorData.serverError 	= errModule.E_GATEWAY_MESSAGE_DE_FRAMING;
			return rejected(transXpedia);
		}
	});
};

/* *************************************************************************** */  
