/* ************************************************************************** */
const net 	   		= require ('net');
const errorModule  	= require('../../Utils/error');
const utils 			= require('../../Utils/timestamp');
const parseUrl 					= require('url').parse;
const fs 				= require('fs');
const mkdirp 				= require('mkdirp');
/* ************************************************************************** */


/* ************************************************************************** */
module.exports = function talkToServer (transXpedia) {
try {
	return new Promise ((resolved, rejected) => {
		const url = parseUrl(transXpedia.clientData.gatewayUrl);
		var client = new net.Socket();
		let currentEventGen = undefined;
		
		client.on('data', recieveData).on('error', connectionError)
		.on('close', connectionClose).on('timeout', connectionTimeOut)
		.on('connect', connection); 

		client.setTimeout (transXpedia.clientData.gatewayTimeout);
		transXpedia.responseData.gatewayConnTime  = utils.getTimeStamp();
		client.connect(url.port, url.hostname, function() {
			transXpedia.responseData.gatewaySendTime  = utils.getTimeStamp();
			if(transXpedia.clientData.debugFlag == true){
				let backupPath = './DebugDumps';
				let filename = `dataTOGateway_${transXpedia.clientData.rrn||transXpedia.clientData.transactionId}`;

				mkdirp(backupPath)
				.then(()=>{
					fs.writeFile(`${backupPath}/${filename}`, Buffer.from (transXpedia.requestBuffer.buffer), (e) => {
						if(e)
								console.log("error in creating dataTOGateway File",e);
						else
								console.log("dataTOGateway File is created");
				});
				})
				.catch((e)=>{
					console.log("error in creating directory ./DebugDumps",e);
				})
			}
			client.write(Buffer.from (transXpedia.requestBuffer.buffer));


		});

		function recieveData (RMessageBuffer) {
			currentEventGen = 'data';
			client.destroy();
			transXpedia.responseData.gatewayRespBackTime  = utils.getTimeStamp();
			if(transXpedia.clientData.debugFlag == true){
				let backupPath = './DebugDumps';
				let filename = `FromGatewayToFI_${transXpedia.clientData.rrn || transXpedia.clientData.transactionId}`;
				mkdirp(backupPath)
				.then(()=>{
					fs.writeFile(`${backupPath}/${filename}`, Buffer.from (RMessageBuffer), (e) => {
						if(e)
								console.log("error in creating fromGatewayToFI File",e);
						else
								console.log("fromGatewayToFI File is created");
				});
				})
				.catch((e)=>{
					console.log("error in creating directory ./DebugDumps",e);
				})
	
				}

			transXpedia.responseBuffer = RMessageBuffer;
			return resolved(transXpedia);
		}

		function connectionError (e) {
			currentEventGen = 'error';
			transXpedia.responseData.gatewayRespBackTime  = utils.getTimeStamp();
			transXpedia.errorData.systemErr 	= e;
			transXpedia.errorData.serverError = errorModule.E_GATEWAY_CONNECTION;
			transXpedia.errorData.errDescription = `GATEWAY CONNECTION FAILURE` +
				`[FUNCTION : talkToServer] ` +
				`[RRN : ${transXpedia.clientData.rrn}] ` +
				`[TRANSACTION_ID : ${transXpedia.clientData.transactionId}]`;
			return rejected(transXpedia);
		}

		function connectionClose (hadError) {
			transXpedia.responseData.gatewayRespBackTime  = utils.getTimeStamp();
			if (hadError == true) {
				transXpedia.errorData.systemErr 	= 'hadError : ' + hadError;
				transXpedia.errorData.serverError = errorModule.E_GATEWAY_TRANSMISSION;
				transXpedia.errorData.errDescription = `GATEWAY TRANSMISSION ERROR ` +
					`[FUNCTION : talkToServer] ` +
					`[RRN : ${transXpedia.clientData.rrn}] ` +
					`[TRANSACTION_ID : ${transXpedia.clientData.transactionId}]`;
				return rejected(transXpedia);
			} else if (undefined == currentEventGen) {
				transXpedia.errorData.systemErr 	= 'NA';
				transXpedia.errorData.serverError = errorModule.E_GATEWAY_NO_DATA_IN_RESP;
				transXpedia.errorData.errDescription = `NO DATA RECIEVED FROM GATEWAY ` +
				`[FUNCTION : talkToServer] ` +
				`[RRN : ${transXpedia.clientData.rrn}] ` +
				`[TRANSACTION_ID : ${transXpedia.clientData.transactionId}]`;
				return rejected(transXpedia);
			} 
	}

	function connectionTimeOut () {
		currentEventGen = 'timeout';
		client.destroy();
		transXpedia.responseData.gatewayRespBackTime  = utils.getTimeStamp();
			transXpedia.errorData.systemErr 	= null;
			transXpedia.errorData.serverError = errorModule.E_GATEWAY_TIMEDOUT;
			transXpedia.errorData.errDescription = `GATEWAY TIMEDOUT ` +
			`[FUNCTION : talkToServer] ` +
			`[RRN : ${transXpedia.clientData.rrn}] ` +
			`[TRANSACTION_ID : ${transXpedia.clientData.transactionId}]`;
			return rejected(transXpedia);
		}

		function connection () {
		}
	});
}catch(e) {
	console.log(e);
}
};
/* ************************************************************************** */
