/* ************************************************************************** */
const http 			= require('http');
const errorModule	= require('../../Utils/error');
const utils 		= require('../../Utils/timestamp');
const parseUrl 					= require('url').parse;
const fs 	       = require('fs');
const mkdirp 	       = require('mkdirp');
/* ************************************************************************** */

/* ************************************************************************** */
module.exports = function talkToServer(transXpedia) {
	return new Promise((resolved, rejected) => {

		const url = parseUrl(transXpedia.clientData.gatewayUrl);
		var client = http.request({
			method   				: 'POST',
			hostname 				: url.hostname,
			port     				: url.port,
			path     				: url.pathname,
			host     				: url.host,
			headers 				: transXpedia.header || null,
		});

		/* ************************************************************* */
		client.on('response', recieveData).on('error', connectionError)
		.on('timeout', connectionTimeOut)
		.on('socket', socket); 
		/* ************************************************************* */

		/* ************************************************************* */
		client.setTimeout (transXpedia.clientData.gatewayTimeout);
		transXpedia.responseData.gatewayConnTime  = utils.getTimeStamp();

		if(transXpedia.isMultiPart == 1 && transXpedia.form != undefined) {
			transXpedia.form.pipe(client);
		}else {
			if(transXpedia.clientData.debugFlag == true){
                        let backupPath = './DebugDumps';
                        let filename = `dataTOGateway_${transXpedia.clientData.rrn||transXpedia.clientData.transactionId}`;
					
						mkdirp(backupPath)
						.then(()=>{
							fs.writeFile(`${backupPath}/${filename}`, Buffer.from (transXpedia.requestBuffer), (e) => {
								if(e)
										console.log("error in creating dataTOGateway File",e);
								else
										console.log("dataTOGateway File is created");
						});
						})
						.catch((e)=>{
							console.log("error in creating directory ./DebugDumps",e);
						})
            }

			client.write(Buffer.from(transXpedia.requestBuffer));
		}

		client.end();
		/* ************************************************************* */

		function recieveData (IncomingMessage) {
			transXpedia.responseData.gatewayRespBackTime  = utils.getTimeStamp();
			if (200 != IncomingMessage.statusCode) {
				transXpedia.errorData.systemErr 	= null;
				transXpedia.errorData.serverError = errorModule.E_HTTP_NOT_OK;
				transXpedia.errorData.errDescription = `UNABLE TO GET HTTP 200 OK RESPONSE FROM GATEWAY : `+
					`HTTP STATUS CODE RECIEVED FROM GATEWAY ${IncomingMessage.statusCode} ` +
					`[FUNCTION : talkToServer] ` +
					`[RRN : ${transXpedia.clientData.rrn}] ` +
					`[TRANSACTION_ID : ${transXpedia.clientData.transactionId}]`;
				return rejected(transXpedia);
			} else {
				transXpedia.responseBuffer  = '';
				IncomingMessage.on('data', (RecievedChunk) => {
					transXpedia.responseBuffer  += RecievedChunk;
				}).on('end', () => {
					if(transXpedia.clientData.debugFlag == true){
						let backupPath = './DebugDumps';
						let filename = `FromGatewayToFI_${transXpedia.clientData.rrn || transXpedia.clientData.transactionId}`;
						mkdirp(backupPath)
						.then(()=>{
							fs.writeFile(`${backupPath}/${filename}`, Buffer.from (transXpedia.responseBuffer), (e) => {
								if(e)
										console.log("error in creating fromGatewayToFI File",e);
								else
										console.log("fromGatewayToFI File is created");
						});
						})
						.catch((e)=>{
							console.log("error in creating directory ./DebugDumps",e);
						})
			
					}
				if(transXpedia.responseBuffer.length == 0){	
					transXpedia.errorData.systemErr 	= 'NA';
					transXpedia.errorData.serverError = errorModule.E_GATEWAY_NO_DATA_IN_RESP;
					transXpedia.errorData.errDescription = `NO DATA RECIEVED FROM GATEWAY ` +
						`[FUNCTION : talkToServer] ` +
						`[RRN : ${transXpedia.clientData.rrn}] ` +
						`[TRANSACTION_ID : ${transXpedia.clientData.transactionId}]`;
					return rejected(transXpedia);
				}
				else{
					return resolved(transXpedia);
				}
				}).on('aborted', (e) => {
					transXpedia.errorData.systemErr 	= e;
					transXpedia.errorData.serverError   = errorModule.E_HTTP_CONNECTION_ABORT;
					transXpedia.errorData.errDescription = `UNABLE TO GET RESPONSE FROM GATEWAY : ` + 
						`[FUNCTION : talkToServer] ` +
						`[RRN : ${transXpedia.clientData.rrn}] ` +
						`[TRANSACTION_ID : ${transXpedia.clientData.transactionId}]`;
					return rejected(transXpedia);
				}).on('close', () => {
					console.log ('Socket Closed');
				});
			}
		}

		function connectionError (e) {
			transXpedia.responseData.gatewayRespBackTime  = utils.getTimeStamp();
			transXpedia.errorData.systemErr 	= e;
			transXpedia.errorData.serverError = errorModule.E_GATEWAY_CONNECTION;
			transXpedia.errorData.errDescription = `GATEWAY CONNECTION FAILURE` +
				`[FUNCTION : talkToServer] ` +
				`[RRN : ${transXpedia.clientData.rrn}] ` +
				`[TRANSACTION_ID : ${transXpedia.clientData.transactionId}]`;
			return rejected(transXpedia);
		}

		function connectionTimeOut () {
			client.abort();
			transXpedia.responseData.gatewayRespBackTime  = utils.getTimeStamp();
			transXpedia.errorData.systemErr 	= null;
			transXpedia.errorData.serverError = errorModule.E_GATEWAY_TIMEDOUT;
			transXpedia.errorData.errDescription = `GATEWAY TIMEDOUT ` +
				`[FUNCTION : talkToServer] ` +
				`[RRN : ${transXpedia.clientData.rrn}] ` +
				`[TRANSACTION_ID : ${transXpedia.clientData.transactionId}]`;
			return rejected(transXpedia);
		}

		function socket(clientSocket) {
			clientSocket.on('connect', () => {
			transXpedia.responseData.gatewaySendTime  = utils.getTimeStamp();				
			})
		}
	});
}
/* ************************************************************************** */
