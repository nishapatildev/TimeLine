/* ********************************************************************** */
const xml2js 	= require('xml2js');
const errModule = require('./error');
/* ********************************************************************** */

function parseXMLBufferToJSON (transXpedia) {
	return new Promise ((resolved, rejected) => {
		try {
			xml2js.parseString (transXpedia.responseBuffer, {explicitArray: false},(e, jsonXML) => {
				if (e) {
					transXpedia.errorData.systemErr   = e;
					transXpedia.errorData.serverError = errModule.E_XML_PARSING;
					transXpedia.errorData.errDescription = `CLIENT ERROR MESSAGE CREATION FAILED [FUNCTION : parseXMLBufferToJSON]`;
					return rejected(transXpedia);
				} else {
					transXpedia.xmlJson = jsonXML;
					return resolved(transXpedia);
				}
			});
		} catch (e) {
			throw e;
			//transXpedia.errorData.systemErr   = e;
			//transXpedia.errorData.serverError = errModule.E_TXN_MODULE_CREATE;
			//transXpedia.errorData.errDescription = `CLIENT ERROR MESSAGE CREATION FAILED [FUNCTION : ${parseXMLBufferToJSON.name}]`;
			//return rejected(transXpedia);
		}
	});
}

function parseJSONToXML (transXpedia) {
	return new Promise ((resolved, rejected) => {
		try {
			let builder = new xml2js.Builder({
				renderOpts : {'newline':''}
			});
			let xmlBuffer = builder.buildObject(transXpedia.XML_JSON);
			transXpedia.PLAIN_BUFFER = xmlBuffer;
			return resolved(transXpedia);
		} catch (e) {
			transXpedia.systemErr   = e;
			transXpedia.serverError = errModule.E_XML_BUFFER_CREATE;
			transXpedia.errDescription = `XML BUFFER CREATION FAILED ` + 
				`[FUNCTION : ${parseJSONToXML.name}]`;
			return rejected(transXpedia);
		}
	});
}

module.exports = {
  parseXMLBufferToJSON : parseXMLBufferToJSON,
  parseJSONToXML : parseJSONToXML
}
